# Staging environment values for fennel-node chart
# These values override the base values.yaml for staging deployments

image:
  repository: "ghcr.io/corruptedaesthetic/fennel-solonet"
  tag: "dev-placeholder"  # Will be updated by CI
  digest: ""  # Image digest for cryptographic verification (set by CI)
  pullPolicy: Always

# Release information (set by CI for tagged releases)
releaseTag: ""

chainspec:
  file: "staging-chainspec.json"

node:
  enabled: true
  
  image:
    repository: "ghcr.io/corruptedaesthetic/fennel-solonet"
    tag: "dev-placeholder"  # Will be updated by CI
    pullPolicy: Always
  
  node:
    chain: "fennel"
    command: "fennel-node"
    replicas: 1
    role: "authority"
    
    customChainspec: true
    customChainspecPath: "/chainspec/staging-chainspec.json"
    customChainspecSha256: ""  # SHA-256 hash for verification (set by CI)
    
    chainData:
      storageClass: "local-path"  # Adjust for your Azure cluster
      volumeSize: "100Gi"
      pruning: 1000  # Keep last 1000 blocks for staging
      
    chainKeystore:
      storageClass: "local-path"
      volumeSize: "10Mi"
      mountInMemory:
        enabled: false  # Use persistent storage for staging
        
    # Staging-specific flags
    flags:
      - "--chain=/chainspec/staging-chainspec.json"
      - "--rpc-external"
      - "--rpc-cors=all"
      - "--rpc-methods=unsafe"  # Safe for staging
      - "--log=info,runtime::system=debug"
      - "--enable-offchain-indexing=true"
      - "--name=fennel-staging-validator"
      - "--validator"
      - "--force-authoring"
      
    perNodeServices:
      apiService:
        enabled: true
        type: ClusterIP
        annotations:
          service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      p2pService:
        enabled: true
        type: NodePort
        nodePort: 30333
        
    prometheus:
      enabled: true
      port: 9615
      
    # Use existing secrets for keys
    existingSecrets:
      keys:
        - "validator-keys"
      nodeKey:
        secretName: "node-key"
        secretKey: "node.key"

  # Staging resource allocation
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2
      memory: 4Gi

  # Service monitor
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    
  # Pod security context
  podSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  
  # Additional volumes for chainspec
  extraVolumes:
    - name: chainspec
      configMap:
        name: "fennel-chainspec"
        
  extraVolumeMounts:
    - name: chainspec
      mountPath: /chainspec
      readOnly: true
  
  # Environment variables
  extraEnvVars:
    - name: RUST_LOG
      value: "info,sc_basic_authorship=trace"
    - name: RUST_BACKTRACE
      value: "1"
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace

  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9615"
    prometheus.io/path: "/metrics"
    environment: "staging"
    
  # Additional labels
  extraLabels:
    environment: staging
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/component: "blockchain-node"
    
  # Health checks
  startupProbe:
    enabled: true
    httpGet:
      path: /health
      port: 9944
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
  
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 9944
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 9944
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
